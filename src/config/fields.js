const standard = (filter, aggregator, column, max = 3000) => `${aggregator}(CASE WHEN ${column} > ${max} THEN NULL ELSE ${column} END) AS ${column}`

module.exports = {
	timestamp: (filter) => `(UNIX_TIMESTAMP(timestamp) - MOD(UNIX_TIMESTAMP(timestamp), ${filter.getInterval()})) AS timestamp`,
	temp: (filter, aggregator) => standard(filter, aggregator, 'temp', 300),
	humid: (filter, aggregator) => standard(filter, aggregator, 'humid', 100),
	rain: (filter, aggregator) => standard(filter, aggregator, 'rain', 300),
	windDir: (filter, aggregator) => `ROUND(,
		(DEGREES(ATAN2(,
			${aggregator}(CASE WHEN windSpeed > 1000 OR windDir < 0 OR windDir > 360 THEN NULL ELSE (windSpeed * SIN(RADIANS(windDir))) END),,
			${aggregator}(CASE WHEN windSpeed > 1000 OR windDir < 0 OR windDir > 360 THEN NULL ELSE (windSpeed * COS(RADIANS(windDir))) END),
		)) + 360) % 360,,
		0,
	) AS windDir`,
	windSpeed: (filter, aggregator) => standard(filter, aggregator, 'windSpeed', 300),
	gustDir: (filter, aggregator) => `ROUND(,
		(DEGREES(ATAN2(,
			${aggregator}(CASE WHEN gustSpeed > 1000 OR gustDir < 0 OR gustDir > 360 THEN NULL ELSE (gustSpeed * SIN(RADIANS(gustDir))) END),,
			${aggregator}(CASE WHEN gustSpeed > 1000 OR gustDir < 0 OR gustDir > 360 THEN NULL ELSE (gustSpeed * COS(RADIANS(gustDir))) END),
		)) + 360) % 360,,
		0,
	) AS gustDir`,
	gustSpeed: (filter, aggregator) => standard(filter, aggregator, 'gustSpeed', 300),
	bmpTemp: (filter, aggregator) => standard(filter, aggregator, 'bmpTemp', 300),
	pressure: (filter, aggregator) => standard(filter, aggregator, 'pressure', 2000),
	sht2xTemp: (filter, aggregator) => standard(filter, aggregator, 'sht2xTemp', 300),
	sht2xHumid: (filter, aggregator) => standard(filter, aggregator, 'sht2xHumid', 100),
	solarIrrad: (filter, aggregator) => standard(filter, aggregator, 'solarIrrad', 3000),
	solarIrradMax: (filter, aggregator) => standard(filter, aggregator, 'solarIrradMax', 3000),
	soilMoisture: (filter, aggregator) => standard(filter, aggregator, 'soilMoisture', 1000),
	battery: (filter, aggregator) => standard(filter, aggregator, 'battery', 5000),
	lightSensMax: (filter, aggregator) => standard(filter, aggregator, 'lightSensMax', 1000),
	sigQual: (filter, aggregator) => standard(filter, aggregator, 'sigQual', 1000),
	sigQualMinTime: (filter, aggregator) => standard(filter, aggregator, 'sigQualMinTime', 1000),
}
